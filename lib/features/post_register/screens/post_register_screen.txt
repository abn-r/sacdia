import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:image_picker/image_picker.dart';
import 'package:image_cropper/image_cropper.dart';
import 'package:sacdia/core/constants.dart';
import 'dart:io';
import 'package:sacdia/features/post_register/bloc/post_register_bloc.dart';
import 'package:sacdia/features/post_register/bloc/post_register_event.dart';
import 'package:sacdia/features/post_register/bloc/post_register_state.dart';
import 'package:sacdia/core/widgets/input_text_widget.dart';

enum GenderMode { GENDER_ALL, GENDER_MALE, GENDER_FEMALE }

class PostRegisterScreen extends StatefulWidget {
  const PostRegisterScreen({super.key});

  @override
  State<PostRegisterScreen> createState() => _PostRegisterScreenState();
}

class _PostRegisterScreenState extends State<PostRegisterScreen> {
  @override
  Widget build(BuildContext context) {
    // Proveemos el Bloc aquí para que toda la vista lo consuma.
    return const _PostRegisterView();
  }
}

class _PostRegisterView extends StatefulWidget {
  const _PostRegisterView();

  @override
  State<_PostRegisterView> createState() => _PostRegisterViewState();
}

class _PostRegisterViewState extends State<_PostRegisterView> {
  int _currentStep = 0;

  final _nameCtrl = TextEditingController();


  // Lógica local: seleccionar y recortar foto, luego emitir evento al Bloc.
  Future<void> _pickAndCropImage() async {
    try {
      final picker = ImagePicker();
      final pickedFile = await picker.pickImage(source: ImageSource.gallery);
      if (pickedFile == null) return; // Usuario canceló

      final croppedFile = await ImageCropper().cropImage(
        sourcePath: pickedFile.path,
        aspectRatio: const CropAspectRatio(ratioX: 1, ratioY: 1),
        maxHeight: 800,
        maxWidth: 800,
      );
      if (croppedFile == null) return; // Usuario canceló recorte

      final file = File(croppedFile.path);

      // Evento al Bloc para que almacene la foto
      context.read<PostRegisterBloc>().add(PhotoSelected(file));
    } catch (e) {
      debugPrint('Error al seleccionar/recortar foto: $e');
    }
  }

  void _onUpload() {
    // Evento para subir la foto al storage
    context.read<PostRegisterBloc>().add(UploadPhotoRequested());
  }

  void _onResetPhoto() {
    // Evento para borrar la foto seleccionada
    context.read<PostRegisterBloc>().add(ResetPhoto());
  }

  // Lógica de avanzar el Stepper
  void _onStepContinue() {
    // Opcional: si quieres bloquear el botón en el Step 0 cuando la foto no está subida
    // obtén el estado del bloc y haz la validación.
    if (_currentStep < 2) {
      setState(() {
        _currentStep += 1;
      });
    }
  }

  // Lógica de retroceder el Stepper
  void _onStepCancel() {
    if (_currentStep > 0) {
      setState(() {
        _currentStep -= 1;
      });
    }
  }

  List<Step> _buildSteps(PostRegisterState state) {
    return [
      Step(
        title: const SizedBox.shrink(),
        label: const Text('Paso 1'),
        content: Column(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Text(
              'Sube tu foto de perfil',
              style: TextStyle(fontSize: 20, color: sacBlack),
            ),
            const SizedBox(height: 20),
            if (state.selectedPhoto == null) ...[
              ElevatedButton(
                onPressed: _pickAndCropImage,
                style: ButtonStyle(
                  backgroundColor: WidgetStateProperty.all<Color>(sacRed),
                  elevation: WidgetStateProperty.all(0),
                ),
                child: const Text(
                  'Seleccionar',
                  style: TextStyle(
                    color: Colors.white,
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ] else ...[
              Center(
                child: CircleAvatar(
                  radius: 100,
                  backgroundImage: FileImage(state.selectedPhoto!),
                  foregroundColor: Colors.white,
                ),
              ),
              const SizedBox(height: 20),
              Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    // Botón para cambiar de foto (Reset)
                    ElevatedButton(
                      onPressed: _onResetPhoto,
                      style: ButtonStyle(
                        backgroundColor: WidgetStateProperty.all<Color>(
                            Colors.grey.shade300),
                        elevation: WidgetStateProperty.all(0),
                      ),
                      child: const Text('Cambiar',
                          style: TextStyle(
                              color: sacBlack,
                              fontSize: 16,
                              fontWeight: FontWeight.bold)),
                    ),
                    const SizedBox(width: 20),

                    ElevatedButton(
                      onPressed: state.isUploaded || state.isUploading
                          ? null
                          : _onUpload,
                      style: ButtonStyle(
                        backgroundColor: WidgetStateProperty.all<Color>(sacRed),
                        elevation: WidgetStateProperty.all(0),
                      ),
                      child: state.isUploading
                          ? const SizedBox(
                              width: 20,
                              height: 20,
                              child: CircularProgressIndicator(
                                strokeWidth: 2.5,
                                backgroundColor: Colors.white,
                              ),
                            )
                          : const Text('Guardar',
                              style: TextStyle(
                                  color: Colors.white,
                                  fontSize: 16,
                                  fontWeight: FontWeight.bold)),
                    ),
                  ]),

              // Si hay error, lo mostramos
              if (state.errorMessage != null) ...[
                const SizedBox(height: 8),
                Text(
                  'Error al subir la foto: ${state.errorMessage}',
                  style: const TextStyle(color: Colors.red),
                  textAlign: TextAlign.center,
                ),
              ],

              if (state.isUploaded) ...[
                const SizedBox(height: 8),
                Container(
                  decoration: BoxDecoration(
                    color: sacGreen,
                    borderRadius: BorderRadius.circular(10),
                  ),
                  child: const Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.info_outline, color: Colors.white),
                        SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            '¡Genial! Ya tienes una foto de perfil. '
                            'Pulsa en Continuar para ir al siguiente paso.',
                            style: TextStyle(color: Colors.white),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ],
          ],
        ),
        isActive: _currentStep >= 0,
        state: _currentStep > 0 ? StepState.complete : StepState.indexed,
      ),
      Step(
        title: const SizedBox.shrink(),
        label: const Text('Paso 2'),
        content: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            CustomTextField(
              controller: _nameCtrl,
              labelText: 'Nombre',
              keyboardType: TextInputType.text,
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'Ingresa tu nombre';
                }
                return null;
              },
            ),
            const TextField(decoration: InputDecoration(labelText: 'Nombre')),
            const TextField(decoration: InputDecoration(labelText: 'Apellido')),
          ],
        ),
        isActive: _currentStep >= 1,
        state: _currentStep > 1 ? StepState.complete : StepState.indexed,
      ),
      Step(
        title: const SizedBox.shrink(),
        label: const Text('Paso 3'),
        content: const Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            TextField(
                decoration: InputDecoration(labelText: 'Correo electrónico')),
            TextField(
                decoration: InputDecoration(labelText: 'Número de teléfono')),
          ],
        ),
        isActive: _currentStep >= 2,
        state: _currentStep == 2 ? StepState.indexed : StepState.complete,
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<PostRegisterBloc, PostRegisterState>(
      listenWhen: (previous, current) =>
          previous.isUploaded != current.isUploaded ||
          previous.errorMessage != current.errorMessage,
      listener: (context, state) {
        if (state.isUploaded) {
          // Éxito
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              backgroundColor: Colors.green,
              content: Row(
                children: [
                  Icon(Icons.check_circle, color: Colors.white),
                  SizedBox(width: 8),
                  Text(
                    '¡Foto subida correctamente!',
                    style: TextStyle(color: Colors.white),
                  ),
                ],
              ),
            ),
          );
        } else if (state.errorMessage != null) {
          // Error
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              backgroundColor: Colors.black87,
              content: Row(
                children: [
                  const Icon(Icons.error_outline, color: Colors.white),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      'Error al subir la foto: ${state.errorMessage}',
                      style: const TextStyle(color: Colors.white),
                    ),
                  ),
                ],
              ),
            ),
          );
        }
      },
      child: BlocBuilder<PostRegisterBloc, PostRegisterState>(
        builder: (context, state) {
          return Scaffold(
            backgroundColor: Colors.white,
            appBar: AppBar(
              elevation: 0,
              title: const Text(
                'COMPLETAR REGISTRO',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.bold,
                  fontSize: 18,
                ),
              ),
              backgroundColor: sacRed,
            ),
            body: Stack(
              children: [
                Transform.translate(
                  offset: const Offset(0, -25),
                  child: Stepper(
                    currentStep: _currentStep,
                    onStepContinue: _onStepContinue,
                    onStepCancel: _onStepCancel,
                    steps: _buildSteps(state),
                    type: StepperType.horizontal,
                    elevation: 0,
                    connectorColor: WidgetStateProperty.all<Color>(sacRed),
                    controlsBuilder: (context, details) {
                      return const SizedBox.shrink();
                      // return Row(
                      //   children: [
                      //     ElevatedButton(
                      //       onPressed: details.onStepContinue,
                      //       child: const Text('Continuar'),
                      //     ),
                      //     const SizedBox(width: 8),
                      //     if (_currentStep > 0)
                      //       ElevatedButton(
                      //         onPressed: details.onStepCancel,
                      //         child: const Text('Atrás'),
                      //       ),
                      //   ],
                      // );
                    },
                  ),
                ),
                // Botones fijos
                Align(
                  alignment: Alignment.bottomCenter,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                        horizontal: 20, vertical: 20),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: <Widget>[
                        if (_currentStep > 0)
                          ElevatedButton(
                            onPressed: _onStepCancel,
                            style: ButtonStyle(
                              backgroundColor: WidgetStateProperty.all<Color>(
                                  Colors.grey.shade300),
                              elevation: WidgetStateProperty.all(0),
                            ),
                            child: const Text(
                              'Atrás',
                              style: TextStyle(
                                color: sacBlack,
                                fontSize: 18,
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                        const SizedBox(width: 8),
                        ElevatedButton(
                          onPressed: state.isUploaded ? _onStepContinue : null,
                          style: ButtonStyle(
                            backgroundColor: WidgetStateProperty.all<Color>(
                                state.isUploaded ? sacRed : sacGrey),
                            elevation: WidgetStateProperty.all(0),
                          ),
                          child: const Text(
                            'Continuar',
                            style: TextStyle(
                              fontSize: 18,
                              color: Colors.white,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }
}
